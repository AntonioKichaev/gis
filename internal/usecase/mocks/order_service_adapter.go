// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	dto "github.com/AntonioKichaev/gis/internal/dto"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// OrderServiceAdapter is an autogenerated mock type for the OrderServiceAdapter type
type OrderServiceAdapter struct {
	mock.Mock
}

type OrderServiceAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderServiceAdapter) EXPECT() *OrderServiceAdapter_Expecter {
	return &OrderServiceAdapter_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function with given fields: ctx, input
func (_m *OrderServiceAdapter) CreateOrder(ctx context.Context, input *dto.CreateOrderInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateOrderInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderServiceAdapter_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type OrderServiceAdapter_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - input *dto.CreateOrderInput
func (_e *OrderServiceAdapter_Expecter) CreateOrder(ctx interface{}, input interface{}) *OrderServiceAdapter_CreateOrder_Call {
	return &OrderServiceAdapter_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, input)}
}

func (_c *OrderServiceAdapter_CreateOrder_Call) Run(run func(ctx context.Context, input *dto.CreateOrderInput)) *OrderServiceAdapter_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.CreateOrderInput))
	})
	return _c
}

func (_c *OrderServiceAdapter_CreateOrder_Call) Return(_a0 error) *OrderServiceAdapter_CreateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderServiceAdapter_CreateOrder_Call) RunAndReturn(run func(context.Context, *dto.CreateOrderInput) error) *OrderServiceAdapter_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderServiceAdapter creates a new instance of OrderServiceAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderServiceAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderServiceAdapter {
	mock := &OrderServiceAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
