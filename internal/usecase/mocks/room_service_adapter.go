// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	dto "github.com/AntonioKichaev/gis/internal/dto"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RoomServiceAdapter is an autogenerated mock type for the RoomServiceAdapter type
type RoomServiceAdapter struct {
	mock.Mock
}

type RoomServiceAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *RoomServiceAdapter) EXPECT() *RoomServiceAdapter_Expecter {
	return &RoomServiceAdapter_Expecter{mock: &_m.Mock}
}

// CreateBooking provides a mock function with given fields: ctx, input
func (_m *RoomServiceAdapter) CreateBooking(ctx context.Context, input *dto.CreateBookingRoomInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateBookingRoomInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoomServiceAdapter_CreateBooking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBooking'
type RoomServiceAdapter_CreateBooking_Call struct {
	*mock.Call
}

// CreateBooking is a helper method to define mock.On call
//   - ctx context.Context
//   - input *dto.CreateBookingRoomInput
func (_e *RoomServiceAdapter_Expecter) CreateBooking(ctx interface{}, input interface{}) *RoomServiceAdapter_CreateBooking_Call {
	return &RoomServiceAdapter_CreateBooking_Call{Call: _e.mock.On("CreateBooking", ctx, input)}
}

func (_c *RoomServiceAdapter_CreateBooking_Call) Run(run func(ctx context.Context, input *dto.CreateBookingRoomInput)) *RoomServiceAdapter_CreateBooking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.CreateBookingRoomInput))
	})
	return _c
}

func (_c *RoomServiceAdapter_CreateBooking_Call) Return(_a0 error) *RoomServiceAdapter_CreateBooking_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoomServiceAdapter_CreateBooking_Call) RunAndReturn(run func(context.Context, *dto.CreateBookingRoomInput) error) *RoomServiceAdapter_CreateBooking_Call {
	_c.Call.Return(run)
	return _c
}

// NewRoomServiceAdapter creates a new instance of RoomServiceAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoomServiceAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoomServiceAdapter {
	mock := &RoomServiceAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
